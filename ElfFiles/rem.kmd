KMD
00000000: EA00001D    ;             B main
00000004:             ; xval        EQU     259
00000004:             ; yval        EQU     111
00000004: 45 72 72 6F ; strBadInput DEFB    "Error, bad input to [rem]\0"
00000008: 72 2C 20 62 ; 
0000000C: 61 64 20 69 ; 
00000010: 6E 70 75 74 ; 
00000014: 20 74 6F 20 ; 
00000018: 5B 72 65 6D ; 
0000001C: 5D 00       ; 
00000020:             ;             ALIGN 
00000020:             ; 
00000020:             ; rem                         ; modulus(R4,R5) returns R3
00000020: E1540005    ;     CMP     R4, R5
00000024: A3550000    ;     CMPGE   R5, #0      ; cut down another branch
00000028: BA000008    ;     BLT     badinput
0000002C: E3540000    ;     CMP     R4, #0
00000030: DA000006    ;     BLE     badinput
00000034:             ;     
00000034: E1A03004    ;     MOV     R3, R4
00000038:             ;   remwhile
00000038: E3530000    ;     CMP     R3, #0      ; need to make it so it only subtracts if bigger by 'divisor' 
0000003C: C0533005    ;     SUBGTS  R3, R3, R5
00000040: CAFFFFFC    ;     BGT     remwhile 
00000044:             ; 
00000044: 01A0F00E    ;     MOVEQ   PC, LR        ; if (x==0) return (x);
00000048: E0833005    ;     ADD     R3, R3, R5
0000004C: E1A0F00E    ;     MOV     PC, LR          ; else return (y + x);
00000050:             ;     
00000050:             ; badinput
00000050: E24F0054    ;     ADR     R0, strBadInput
00000054: EF000003    ;     SWI     3
00000058: E3A00020    ;     MOV     R0, #32 
0000005C: EF000000    ;     SWI     0
00000060: E1A00004    ;     MOV     R0, R4
00000064: EF000004    ;     SWI     4
00000068: E3A00020    ;     MOV     R0, #32 
0000006C: EF000000    ;     SWI     0
00000070: E1A00005    ;     MOV     R0, R5
00000074: EF000004    ;     SWI     4
00000078: EF000002    ;     SWI     2
0000007C:             ; 
0000007C:             ; main
0000007C: E59F4038    ;     LDR     R4, =xval 
00000080: E3A0506F    ;     LDR     R5, =yval
00000084:             ;  
00000084: EBFFFFE5    ;     BL      rem
00000088:             ; 
00000088: E1A00004    ;     MOV     R0, R4
0000008C: EF000004    ;     SWI     4
00000090: E3A00025    ;     MOV     R0, #'%'
00000094: EF000000    ;     SWI     0
00000098: E1A00005    ;     MOV     R0, R5
0000009C: EF000004    ;     SWI     4
000000A0: E3A0003D    ;     MOV     R0, #'='
000000A4: EF000000    ;     SWI     0
000000A8: E1A00003    ;     MOV     R0, R3
000000AC: EF000004    ;     SWI     4
000000B0: E3A0000A    ;     MOV     R0, #10
000000B4: EF000000    ;     SWI     0
000000B8:             ; 
000000B8: EF000002    ;     SWI     2
000000BC:             ; 
000000BC: 00000103    ; Remaining literals

Symbol Table: Labels
: xval                              00000103  Value
: yval                              0000006F  Value
: strBadInput                       00000004  Local -- ARM
: rem                               00000020  Local -- ARM
: remwhile                          00000038  Local -- ARM
: badinput                          00000050  Local -- ARM
: main                              0000007C  Local -- ARM
