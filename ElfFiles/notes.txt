If we find the divisor, y (which is also the modulus result) to be zero, we know that we have found the GCD, and so we return it and head back up the stack. Otherwise, we create another instance, with new parameters. We then use the previous remainder, and the new calculated remainder as parameters. This provides us with a new set of values, which will tend towards a remainder of zero, and then return back up the stack. Because GCD does not need to access any variables from a previous instantiation of itself, we do not need to store any registers minus the link register. As neither gcd or rem trashes each other's values, we do not need to back them up prior to calling each other. The function is tail recursive, therefore when the function is done, it simply returns the value. This means that we do not need to store any previous values, as we simply return the value. 