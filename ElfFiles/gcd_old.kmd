KMD
00000000:             ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; ;;;;;;;;;;;;;;;;            NEEDS COMMENTS      ;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00000000:             ; 
00000000: EA000017    ;                 B main
00000004:             ; stack           EQU         0x1000
00000004:             ; input1          EQU         255;91
00000004:             ; input2          EQU         12 ;26
00000004: 47 43 44 28 ; result1         DEFB    "GCD(\0"
00000008: 00          ; 
00000009: 29 20 3D 20 ; result2         DEFB    ") = \0"
0000000D: 00          ; 
0000000E: 45 72 72 6F ; strBadInput     DEFB    "Error, bad input to [rem]\0"
00000012: 72 2C 20 62 ; 
00000016: 61 64 20 69 ; 
0000001A: 6E 70 75 74 ; 
0000001E: 20 74 6F 20 ; 
00000022: 5B 72 65 6D ; 
00000026: 5D 00       ; 
00000028:             ;                 ALIGN
00000028:             ; 
00000028:             ; badinput
00000028: E24F0022    ;         ADR     R0, strBadInput
0000002C: EF000003    ;         SWI     3
00000030: EF000002    ;         SWI     2        
00000034:             ;         
00000034: E1A03000    ; rem     MOV     R3, R0                  ; we need to use more registers as the function breaks 
                      ; without them!  
00000038: E1A04001    ;         MOV     R4, R1              
0000003C:             ;             
0000003C:             ; remloop 
0000003C: E0533004    ;         SUBS    R3, R3, R4
00000040: CAFFFFFD    ;         BGT     remloop
00000044: B0833004    ;         ADDLT   R3, R3, R4              ; no point doing a CMP before to check if R3>R4, ineffi
                      ; cient in the grand scale of things
00000048: E1A0F00E    ;         MOV     PC, LR
0000004C:             ; 
0000004C:             ; gcd        
0000004C: E92D4000    ;         STMFD     SP!, {LR}             ; only store this the first time we enter the function,
                      ;  as then we don't need a load of MOV PC, LR etc to return to the main code, it's a single one
00000050:             ; gcdloop
00000050: EBFFFFF7    ;         BL      rem
00000054: E1A00001    ;         MOV     R0, R1                  ; value of (y)
00000058: E1A01003    ;         MOV     R1, R3                  ; value of (x % y)
0000005C: 1AFFFFFB    ;         BNE     gcdloop                 ; keep going if we have (R3!=0) from remloop
00000060: E8BD8000    ;         LDMFD   SP!, {PC}               ; finally return to the main program body
00000064:             ; 
00000064:             ; main    
00000064: E3A0DA01    ;         MOV     SP, #stack      
00000068: E24F006C    ;                 ADR     R0, result1
0000006C: EF000003    ;                 SWI     3                   ; put out the string 
00000070: E3A000FF    ;                 LDR     R0, =input1
00000074: EF000004    ;                 SWI     4
00000078: E3A0002C    ;         MOV     R0, #','
0000007C: EF000000    ;         SWI     0
00000080: E3A0000C    ;         LDR     R0, =input2
00000084: EF000004    ;                 SWI     4
00000088:             ;         
00000088: E1A01000    ;         MOV     R1, R0      ; backup so don't need to do another LDR
0000008C:             ;         
0000008C: E24F008B    ;         ADR     R0, result2
00000090: EF000003    ;                 SWI     3                   ; put out the string 
00000094:             ;                 
00000094: E3A000FF    ;         LDR     R0, =input1 ;;;;;;;;;;;;;;;; why = not # ??? - large numbs
00000098:             ;             
00000098:             ;                             ; only check once, instead of after each execution
00000098: E1500001    ;         CMP     R0, R1
0000009C: A3500000    ;         CMPGE   R0, #0      ; cut down another branch
000000A0: BAFFFFE0    ;         BLT     badinput
000000A4: E3510000    ;         CMP     R1, #0
000000A8: DAFFFFDE    ;         BLE     badinput
000000AC:             ;         
000000AC:             ;         
000000AC: EBFFFFE6    ;         BL      gcd
000000B0: EF000004    ;                 SWI     4               ; gcd's result is returned in R0
000000B4: E3A0000A    ;         MOV     R0, #10
000000B8: EF000000    ;         SWI     0
000000BC: EF000002    ;                 SWI     2
000000C0:             ; 
000000C0:             ;         
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;            NEEDS COMMENTS      ;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ; ;;;;;;;;;;;;; 
000000C0:             ; 
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; B main
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; stack           EQU           0x1000
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; input1          EQU           2015
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; input2          EQU           837
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; result1         DEFB      "GCD(\0"
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; result2         DEFB      ") = \0"
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; strBadInput     DEFB    "Error, bad input to [rem]\0"
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ALIGN
000000C0:             ; 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; badinput
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     2  
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ADR     R0, strBadInput
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     3
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R0, #32 
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     0
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R0, R4
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     4
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R0, #32 
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     0
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R0, R5
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     4
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     2        
000000C0:             ;         
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; rem                         ; modulus(R4,R5) returns R4
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; CMP     R0, R1
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BLT     exit        ; finally got the gcd
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; CMP     R1, #0      ; cut down another branch
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BLT     badinput
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; CMP     R0, #0
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BLE     badinput
000000C0:             ;         
000000C0:             ;   ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; remwhile
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SUBS      R0, R0, R1
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BGT       remwhile
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ADDLT     R0, R0, R1
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV               PC, LR          ; should now be
                      ;  R1 in R0
000000C0:             ; 
000000C0:             ;         
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; R0 = x
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; R1 = y
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; gcd(R1, R0 % R1)
000000C0:             ;         
000000C0:             ;         
000000C0:             ;         
000000C0:             ;         
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; gcd               ; gcd algorithm; returns result in R0
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; CMP     R1, #0          ; if (y == 0) ret
                      ; urn x;
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BEQ     exit
000000C0:             ;                 
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; STMFD   SP!, {LR}       ; else return (gcd (y, x 
                      ; % y));
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BL      rem             ; get the remaind
                      ; er
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BL      gcd
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; exit
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; LDMFD   SP!, {PC}
000000C0:             ;                 
000000C0:             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; main      
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     SP, #stack        
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ADR     R0, result1
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     3                   ; put out t
                      ; he string 
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; LDR     R0, =input1
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     4
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R0, #','
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     0
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; LDR     R0, =input2
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     4
000000C0:             ;         
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R1, R0      ; backup so don't need to d
                      ; o another LDR
000000C0:             ;         
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ADR     R0, result2
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     3                   ; put out t
                      ; he string 
000000C0:             ;                 
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; LDR     R0, =input1 ;;;;;;;;;;;;;;;; why = not # 
                      ; ??? - large numbs
000000C0:             ;             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; LDR     R1, =input2 ;;;;;;;;;;;;;;;; why = no
                      ; t # ??? - large numbs
000000C0:             ;             ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; BL      gcd
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     4         ; gcd's result is retur
                      ; ned in R0
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; MOV     R0, #10
000000C0:             ;         ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     0
000000C0:             ;                 ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; SWI     2
000000C0:             ; Remaining literals

Symbol Table: Labels
: stack                             00001000  Value
: input1                            000000FF  Value
: input2                            0000000C  Value
: result1                           00000004  Local -- ARM
: result2                           00000009  Local -- ARM
: strBadInput                       0000000E  Local -- ARM
: badinput                          00000028  Local -- ARM
: rem                               00000034  Local -- ARM
: remloop                           0000003C  Local -- ARM
: gcd                               0000004C  Local -- ARM
: gcdloop                           00000050  Local -- ARM
: main                              00000064  Local -- ARM
